{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#representacao-atomica-vs-representacao-fatorada","title":"Representa\u00e7\u00e3o At\u00f4mica vs. Representa\u00e7\u00e3o Fatorada","text":""},{"location":"#detalhamento-das-representacoes","title":"Detalhamento das Representa\u00e7\u00f5es","text":"<ol> <li>Representa\u00e7\u00e3o At\u00f4mica:</li> <li>Cada estado \u00e9 tratado como uma entidade indivis\u00edvel, sem nenhuma estrutura interna.</li> <li>\u00datil quando os estados podem ser enumerados diretamente e s\u00e3o relativamente simples.</li> <li>Os algoritmos que lidam com estados at\u00f4micos exploram os estados como um todo, sem conhecimento sobre poss\u00edveis subcomponentes ou rela\u00e7\u00f5es internas.</li> </ol> <p>Exemplo de uso:    Um tabuleiro de jogo onde cada configura\u00e7\u00e3o poss\u00edvel \u00e9 representada como um estado \u00fanico (e.g., todas as posi\u00e7\u00f5es poss\u00edveis em um jogo da velha).</p> <ol> <li>Representa\u00e7\u00e3o Fatorada:</li> <li>O estado \u00e9 descrito por meio de vari\u00e1veis e valores associados a essas vari\u00e1veis.</li> <li>Permite expressar de maneira compacta problemas com muitos estados poss\u00edveis, evitando a necessidade de enumerar todos os estados.</li> <li>Usada em problemas mais complexos, onde as rela\u00e7\u00f5es entre vari\u00e1veis desempenham papel importante.</li> </ol> <p>Exemplo de uso:    Um Sudoku, onde cada c\u00e9lula \u00e9 uma vari\u00e1vel com um dom\u00ednio (os n\u00fameros de 1 a 9) e restri\u00e7\u00f5es definindo as regras do jogo.</p>"},{"location":"#comparacao","title":"Compara\u00e7\u00e3o","text":"Aspecto Representa\u00e7\u00e3o At\u00f4mica Representa\u00e7\u00e3o Fatorada Defini\u00e7\u00e3o Estados tratados como caixas pretas, sem estrutura interna. Estados descritos por vari\u00e1veis com valores associados. Modelagem Enumera\u00e7\u00e3o de estados \u00fanicos. Composi\u00e7\u00e3o de estados a partir de vari\u00e1veis. Escalabilidade Pouco escal\u00e1vel para problemas com muitos estados. Mais escal\u00e1vel, j\u00e1 que explora rela\u00e7\u00f5es entre vari\u00e1veis. Flexibilidade R\u00edgida; os estados precisam ser definidos explicitamente. Flex\u00edvel; permite mudan\u00e7as no modelo alterando vari\u00e1veis. Efici\u00eancia Ineficiente para grandes espa\u00e7os de estados. Mais eficiente para problemas com muitas restri\u00e7\u00f5es. Aplicabilidade Problemas simples ou de baixa complexidade. Problemas complexos com m\u00faltiplas restri\u00e7\u00f5es. Exemplo de Problema Labirinto, Jogo da Velha. Sudoku, Agendamento, Quadrados M\u00e1gicos. Tratamento das Restri\u00e7\u00f5es Restri\u00e7\u00f5es impl\u00edcitas entre estados. Restri\u00e7\u00f5es expl\u00edcitas entre vari\u00e1veis. Espa\u00e7o de Estados Enumerado explicitamente. Representado de forma compacta. Complexidade de Representa\u00e7\u00e3o Simples. Mais detalhada e estruturada. <p>A escolha entre as duas representa\u00e7\u00f5es depende do problema. Se o espa\u00e7o de estados puder ser gerenciado e as rela\u00e7\u00f5es entre componentes forem simples, a representa\u00e7\u00e3o at\u00f4mica \u00e9 suficiente. Por outro lado, problemas com estados complexos e interdepend\u00eancias s\u00e3o mais bem representados por uma abordagem fatorada.</p> <p>Representa\u00e7\u00e3o At\u00f4mica vs. Fatorada em CSPs</p> <p>Na representa\u00e7\u00e3o at\u00f4mica, os estados s\u00e3o tratados como entidades indivis\u00edveis e sem estrutura interna, ou seja, s\u00e3o considerados \"caixas pretas\". Cada estado \u00e9 \u00fanico e n\u00e3o possui vari\u00e1veis espec\u00edficas que o definam. Esse tipo de representa\u00e7\u00e3o \u00e9 \u00fatil para problemas onde os estados s\u00e3o simples ou podem ser enumerados.</p> <p>Por outro lado, a representa\u00e7\u00e3o fatorada considera os estados como combina\u00e7\u00f5es de valores de vari\u00e1veis. Cada estado \u00e9 definido por um conjunto de vari\u00e1veis que possuem valores espec\u00edficos. Essa abordagem \u00e9 mais eficiente e flex\u00edvel, pois permite modelar problemas complexos com m\u00faltiplas restri\u00e7\u00f5es, explorando as rela\u00e7\u00f5es entre as vari\u00e1veis.</p> <p>Os problemas que utilizam representa\u00e7\u00f5es fatoradas geralmente caem na categoria de problemas de satisfa\u00e7\u00e3o de restri\u00e7\u00f5es (Constraint Satisfaction Problems - CSP). Em CSPs, temos: - Vari\u00e1veis: Conjuntos de elementos que queremos atribuir valores. - Dom\u00ednio: Os poss\u00edveis valores para cada vari\u00e1vel. - Restri\u00e7\u00f5es: Condi\u00e7\u00f5es que definem quais combina\u00e7\u00f5es de valores s\u00e3o permitidas.</p> <p>Resolver um CSP significa encontrar uma atribui\u00e7\u00e3o de valores para todas as vari\u00e1veis que satisfa\u00e7a todas as restri\u00e7\u00f5es.</p> <p>Algortimo de CSP: Quebra-cabe\u00e7a de Quadrado M\u00e1gico</p> <p>Algoritmo para formar um quadrado m\u00e1gico (3 \\times 3). Um quadrado m\u00e1gico \u00e9 uma matriz onde a soma dos n\u00fameros em cada linha, coluna e diagonal principal \u00e9 a mesma.</p> <p>O c\u00f3digo  utiliza o m\u00f3dulo <code>constraint</code> do Python para resolver o problema:</p> <pre><code>from constraint import Problem\n\ndef magic_square_csp(size):\n    # Soma m\u00e1gica para um quadrado m\u00e1gico de tamanho N\n    magic_sum = size * (size**2 + 1) // 2\n\n    # Criar o problema CSP\n    problem = Problem()\n\n    # Adicionar vari\u00e1veis (uma para cada c\u00e9lula)\n    variables = [(i, j) for i in range(size) for j in range(size)]\n    domain = list(range(1, size**2 + 1))\n    problem.addVariables(variables, domain)\n\n    # Restri\u00e7\u00f5es de soma para linhas\n    for i in range(size):\n        problem.addConstraint(lambda *row: sum(row) == magic_sum, [(i, j) for j in range(size)])\n\n    # Restri\u00e7\u00f5es de soma para colunas\n    for j in range(size):\n        problem.addConstraint(lambda *col: sum(col) == magic_sum, [(i, j) for i in range(size)])\n\n    # Restri\u00e7\u00f5es de soma para as diagonais\n    problem.addConstraint(lambda *diag1: sum(diag1) == magic_sum, [(i, i) for i in range(size)])\n    problem.addConstraint(lambda *diag2: sum(diag2) == magic_sum, [(i, size - i - 1) for i in range(size)])\n\n    # Restri\u00e7\u00f5es de valores \u00fanicos\n    problem.addConstraint(lambda *vals: len(set(vals)) == len(vals), variables)\n\n    # Resolver o problema\n    solutions = problem.getSolutions()\n    return solutions\n\n# Executar para um quadrado m\u00e1gico 3x3\nsolutions = magic_square_csp(3)\n\n# Exibir uma solu\u00e7\u00e3o (se existir)\nif solutions:\n    for var, value in sorted(solutions[0].items()):\n        print(f\"Posi\u00e7\u00e3o {var}: {value}\")\n    print(\"\\nQuadrado m\u00e1gico:\")\n    for i in range(3):\n        print([solutions[0][(i, j)] for j in range(3)])\nelse:\n    print(\"Nenhuma solu\u00e7\u00e3o encontrada.\")\n</code></pre> <p>Passos: 1. Defini\u00e7\u00e3o das Vari\u00e1veis: Cada c\u00e9lula do quadrado m\u00e1gico \u00e9 tratada como uma vari\u00e1vel. 2. Dom\u00ednio: Os valores poss\u00edveis para as vari\u00e1veis s\u00e3o n\u00fameros de 1 a (N^2). 3. Restri\u00e7\u00f5es:    - A soma de cada linha, coluna e diagonal deve ser igual \u00e0 soma m\u00e1gica.    - Os valores em todas as c\u00e9lulas devem ser \u00fanicos. 4. Solu\u00e7\u00e3o: O m\u00f3dulo <code>constraint</code> resolve o problema e retorna as solu\u00e7\u00f5es poss\u00edveis.</p>"},{"location":"#definindo-problemas-de-satisfacao-de-condicoes-csp","title":"Definindo Problemas de Satisfa\u00e7\u00e3o de Condi\u00e7\u00f5es (CSP)","text":"<p>Os problemas de satisfa\u00e7\u00e3o de condi\u00e7\u00f5es (CSP - Constraint Satisfaction Problems) s\u00e3o uma classe poderosa e amplamente utilizada em Intelig\u00eancia Artificial (IA) para resolver problemas que podem ser representados como combina\u00e7\u00f5es de vari\u00e1veis sujeitas a restri\u00e7\u00f5es. CSPs fornecem uma abordagem estruturada para representar e resolver problemas complexos, com grande aplicabilidade em dom\u00ednios como agendamento, planejamento, quebra-cabe\u00e7as e aloca\u00e7\u00e3o de recursos.</p>"},{"location":"#componentes-de-um-csp","title":"Componentes de um CSP","text":"<p>Um CSP \u00e9 definido formalmente por tr\u00eas componentes principais:</p> <ol> <li>Vari\u00e1veis (x):</li> <li>Um conjunto x = {x1, x2, ..., xn} de vari\u00e1veis.</li> <li>Cada vari\u00e1vel representa um elemento do problema que requer uma atribui\u00e7\u00e3o de valor.</li> </ol> <p>Exemplo: No problema do Sudoku, cada c\u00e9lula da grade \u00e9 uma vari\u00e1vel.</p> <ol> <li>Dom\u00ednios (d):</li> <li>Um conjunto d = {d1, d2, ..., dn}, onde cada di \u00e9 o dom\u00ednio associado \u00e0 vari\u00e1vel xi.</li> <li>O dom\u00ednio \u00e9 o conjunto de valores poss\u00edveis que podem ser atribu\u00eddos a uma vari\u00e1vel.</li> </ol> <p>Exemplo: Em um Sudoku, o dom\u00ednio de cada vari\u00e1vel (c\u00e9lula) \u00e9 o conjunto {1, 2, ..., 9}.</p> <ol> <li>Condi\u00e7\u00f5es (c):</li> <li>Um conjunto de restri\u00e7\u00f5es c = {c1, c2, ..., ck}, onde cada restri\u00e7\u00e3o especifica combina\u00e7\u00f5es permitidas de valores para um subconjunto de vari\u00e1veis.</li> <li>As condi\u00e7\u00f5es podem ser un\u00e1rias (envolvendo uma \u00fanica vari\u00e1vel) ou mais complexas (envolvendo v\u00e1rias vari\u00e1veis).</li> </ol> <p>Exemplo: No Sudoku, uma restri\u00e7\u00e3o garante que n\u00fameros em uma linha, coluna ou bloco 3x3 sejam \u00fanicos.</p>"},{"location":"#funcionamento-e-solucao","title":"Funcionamento e Solu\u00e7\u00e3o","text":"<p>A resolu\u00e7\u00e3o de CSPs envolve a busca por uma atribui\u00e7\u00e3o de valores para as vari\u00e1veis que satisfa\u00e7a todas as restri\u00e7\u00f5es do problema. Os algoritmos de busca em CSP se destacam porque: - Aproveitam a estrutura de estados para simplificar a busca. - Utilizam heur\u00edsticas e t\u00e9cnicas espec\u00edficas de dom\u00ednio, poda de espa\u00e7o de busca para eliminar combina\u00e7\u00f5es inv\u00e1lidas de forma eficiente.</p>"},{"location":"#por-que-csps-sao-poderosos","title":"Por que CSPs s\u00e3o Poderosos?","text":"<ol> <li>Estrutura\u00e7\u00e3o do Problema:</li> <li> <p>A divis\u00e3o em vari\u00e1veis, dom\u00ednios e restri\u00e7\u00f5es permite modelar problemas de maneira clara e intuitiva.</p> </li> <li> <p>Redu\u00e7\u00e3o do Espa\u00e7o de Busca:</p> </li> <li> <p>CSPs eliminam grandes por\u00e7\u00f5es do espa\u00e7o de busca, analisando restri\u00e7\u00f5es que descartam combina\u00e7\u00f5es invi\u00e1veis logo no in\u00edcio do processo.</p> </li> <li> <p>Flexibilidade:</p> </li> <li> <p>Muitos problemas podem ser representados como CSPs, e o modelo de transi\u00e7\u00e3o (como os estados mudam) pode ser deduzido diretamente a partir da descri\u00e7\u00e3o do problema.</p> </li> <li> <p>Aplica\u00e7\u00e3o de Heur\u00edsticas:</p> </li> <li>Heur\u00edsticas, como \"vari\u00e1vel mais restritiva\" (MRV) ou \"ordem m\u00ednima de dom\u00ednio\", podem ser aplicadas para acelerar a busca.</li> </ol>"},{"location":"#algoritmo-de-csp","title":"Algoritmo de CSP","text":"<p>O exemplo a seguir resolve o problema das N Rainhas, onde devemos posicionar N rainhas em um tabuleiro N x N, de forma que nenhuma rainha ataque outra. Este \u00e9 um problema cl\u00e1ssico de CSP.</p>"},{"location":"#codigo","title":"C\u00f3digo:","text":"<pre><code>from constraint import Problem\n\ndef n_queens_csp(n):\n    # Criar o problema\n    problem = Problem()\n\n    # Adicionar vari\u00e1veis (uma para cada rainha, representando a linha)\n    # Cada vari\u00e1vel pode estar em uma coluna diferente (dom\u00ednio: 0 a n-1)\n    problem.addVariables(range(n), range(n))\n\n    # Adicionar restri\u00e7\u00f5es:\n    # 1. Nenhuma rainha pode estar na mesma coluna\n    problem.addConstraint(lambda *cols: len(set(cols)) == n, range(n))\n\n    # 2. Nenhuma rainha pode atacar na diagonal\n    def no_diagonal_attack(var1, var2, col1, col2):\n        return abs(var1 - var2) != abs(col1 - col2)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            problem.addConstraint(no_diagonal_attack, (i, j))\n\n    # Resolver o problema\n    solutions = problem.getSolutions()\n    return solutions\n\n# Executar para 8 rainhas\nsolutions = n_queens_csp(8)\n\n# Exibir uma solu\u00e7\u00e3o (se existir)\nif solutions:\n    print(\"Solu\u00e7\u00e3o encontrada:\")\n    for var, col in sorted(solutions[0].items()):\n        print(f\"Rainha {var + 1} na coluna {col + 1}\")\nelse:\n    print(\"Nenhuma solu\u00e7\u00e3o encontrada.\")\n</code></pre>"},{"location":"#tipos-de-condicoes-em-csps","title":"Tipos de Condi\u00e7\u00f5es em CSPs","text":"<p>Os Problemas de Satisfa\u00e7\u00e3o de Condi\u00e7\u00f5es (CSP) s\u00e3o constru\u00eddos com base em restri\u00e7\u00f5es que regem quais combina\u00e7\u00f5es de valores para vari\u00e1veis s\u00e3o permitidas. Essas restri\u00e7\u00f5es, ou condi\u00e7\u00f5es, variam em termos de complexidade e n\u00famero de vari\u00e1veis envolvidas. Compreender os tipos de condi\u00e7\u00f5es \u00e9 essencial para modelar problemas de forma eficiente e implementar solu\u00e7\u00f5es pr\u00e1ticas.</p>"},{"location":"#classificacao-dos-tipos-de-condicoes","title":"Classifica\u00e7\u00e3o dos Tipos de Condi\u00e7\u00f5es","text":""},{"location":"#1-condicao-unitaria","title":"1. Condi\u00e7\u00e3o Unit\u00e1ria","text":"<ul> <li>Uma condi\u00e7\u00e3o unit\u00e1ria envolve apenas uma vari\u00e1vel. </li> <li>Ela restringe diretamente os valores que essa vari\u00e1vel pode assumir.</li> </ul> <p>Exemplo Pr\u00e1tico: - Em um problema de planejamento de rotas, uma condi\u00e7\u00e3o unit\u00e1ria pode ser:   \"O ponto de partida (cidade A) n\u00e3o pode ser G.\"   Formalmente: <code>A \u2260 G</code>.</p>"},{"location":"#2-condicao-binaria","title":"2. Condi\u00e7\u00e3o Bin\u00e1ria","text":"<ul> <li>Uma condi\u00e7\u00e3o bin\u00e1ria envolve duas vari\u00e1veis e especifica uma rela\u00e7\u00e3o entre elas.</li> <li>Esse tipo de condi\u00e7\u00e3o \u00e9 comum em problemas que envolvem rela\u00e7\u00f5es diretas entre pares de elementos.</li> </ul> <p>Exemplo Pr\u00e1tico: - No problema do mapa das cores, onde regi\u00f5es adjacentes devem ter cores diferentes:   \"A cor de SA (South Australia) deve ser diferente da de NSW (New South Wales).\"   Formalmente: <code>SA \u2260 NSW</code>.</p>"},{"location":"#3-condicao-ternaria","title":"3. Condi\u00e7\u00e3o Tern\u00e1ria","text":"<ul> <li>Uma condi\u00e7\u00e3o tern\u00e1ria envolve tr\u00eas vari\u00e1veis, impondo uma rela\u00e7\u00e3o entre todas elas.</li> <li>\u00c9 \u00fatil quando h\u00e1 depend\u00eancias mais complexas entre m\u00faltiplos elementos.</li> </ul> <p>Exemplo Pr\u00e1tico: - No problema de aloca\u00e7\u00e3o de assentos em uma confer\u00eancia, onde assentos adjacentes seguem uma hierarquia de import\u00e2ncia:   \"A pessoa X deve ter uma posi\u00e7\u00e3o superior \u00e0 de Y, que, por sua vez, deve ser superior \u00e0 de Z.\"   Formalmente: <code>X &gt; Y &gt; Z</code>.</p>"},{"location":"#4-condicao-global","title":"4. Condi\u00e7\u00e3o Global","text":"<ul> <li>Uma condi\u00e7\u00e3o global envolve um n\u00famero arbitr\u00e1rio de vari\u00e1veis, mas n\u00e3o necessariamente todas as vari\u00e1veis do problema.</li> <li>Geralmente, s\u00e3o usadas em restri\u00e7\u00f5es amplas que aplicam a mesma regra para muitas vari\u00e1veis ao mesmo tempo.</li> </ul> <p>Exemplo Pr\u00e1tico: - No Sudoku, cada n\u00famero deve aparecer apenas uma vez em cada linha, coluna e bloco 3x3. Isso pode ser representado pela condi\u00e7\u00e3o global: <code>Alldiff(A1, A2, A3, B1, B2, B3, C1, C2, C3)</code>.</p>"},{"location":"#transformacao-de-condicoes","title":"Transforma\u00e7\u00e3o de Condi\u00e7\u00f5es","text":"<p>Qualquer CSP pode ser convertido para um modelo contendo apenas condi\u00e7\u00f5es bin\u00e1rias. Por exemplo: - Uma condi\u00e7\u00e3o tern\u00e1ria como <code>X &gt; Y &gt; Z</code> pode ser transformada em duas condi\u00e7\u00f5es bin\u00e1rias: <code>X &gt; Y</code> e <code>Y &gt; Z</code>.</p> <p>Essa convers\u00e3o simplifica a implementa\u00e7\u00e3o de algoritmos, mas pode aumentar o n\u00famero de condi\u00e7\u00f5es no problema.</p>"},{"location":"#condicoes-de-preferencia","title":"Condi\u00e7\u00f5es de Prefer\u00eancia","text":"<p>Al\u00e9m das condi\u00e7\u00f5es necess\u00e1rias, os CSPs tamb\u00e9m podem incluir condi\u00e7\u00f5es de prefer\u00eancia. Essas condi\u00e7\u00f5es n\u00e3o precisam ser satisfeitas, mas ajudam a encontrar solu\u00e7\u00f5es mais adequadas ou desejadas.</p>"},{"location":"#exemplo-pratico-agendamento-universitario","title":"Exemplo Pr\u00e1tico: Agendamento Universit\u00e1rio","text":"<ol> <li>Condi\u00e7\u00f5es Necess\u00e1rias:</li> <li>Nenhum professor pode ministrar duas aulas ao mesmo tempo.</li> <li> <p>Nenhuma sala pode abrigar mais de uma turma simultaneamente.</p> </li> <li> <p>Condi\u00e7\u00f5es de Prefer\u00eancia:</p> </li> <li>O professor A prefere lecionar pela manh\u00e3.</li> <li>A sala X deve ser usada prioritariamente para turmas com mais de 100 alunos.</li> </ol> <p>Solu\u00e7\u00f5es que atendem \u00e0s condi\u00e7\u00f5es preferenciais s\u00e3o consideradas solu\u00e7\u00f5es preferidas, mesmo que n\u00e3o sejam obrigat\u00f3rias.</p>"},{"location":"#propagacao-de-condicoes","title":"Propaga\u00e7\u00e3o de Condi\u00e7\u00f5es","text":"<p>A propaga\u00e7\u00e3o de condi\u00e7\u00f5es \u00e9 uma t\u00e9cnica usada para reduzir o espa\u00e7o de busca em CSPs, garantindo consist\u00eancia local. Em vez de apenas tentar atribui\u00e7\u00f5es para as vari\u00e1veis, o algoritmo: 1. Escolhe um valor para uma vari\u00e1vel. 2. Propaga a condi\u00e7\u00e3o, restringindo os valores poss\u00edveis das vari\u00e1veis relacionadas.</p> <p>Essa t\u00e9cnica: - Elimina combina\u00e7\u00f5es invi\u00e1veis cedo no processo de busca. - Pode disparar uma rea\u00e7\u00e3o em cadeia, onde a redu\u00e7\u00e3o em uma vari\u00e1vel causa redu\u00e7\u00f5es em outras.</p> <p>Exemplo Pr\u00e1tico: Sudoku - Ao atribuir o n\u00famero 5 \u00e0 c\u00e9lula A1, as condi\u00e7\u00f5es do Sudoku eliminam 5 como op\u00e7\u00e3o para todas as outras c\u00e9lulas na mesma linha, coluna e bloco.</p>"},{"location":"#conclusao","title":"Conclus\u00e3o","text":"<p>Entender os tipos de condi\u00e7\u00f5es e como aplic\u00e1-las em CSPs \u00e9 crucial para resolver problemas complexos de forma eficiente. Enquanto as condi\u00e7\u00f5es unit\u00e1rias, bin\u00e1rias e tern\u00e1rias s\u00e3o \u00fateis para modelar rela\u00e7\u00f5es simples, as condi\u00e7\u00f5es globais e de prefer\u00eancia s\u00e3o fundamentais para problemas mais amplos e realistas.</p>"},{"location":"#consistencia-em-csps","title":"Consist\u00eancia em CSPs","text":""},{"location":"#consistencia-de-nos","title":"Consist\u00eancia de N\u00f3s","text":"<p>A consist\u00eancia de n\u00f3s \u00e9 o n\u00edvel mais b\u00e1sico de consist\u00eancia aplicado em problemas de satisfa\u00e7\u00e3o de condi\u00e7\u00f5es (CSPs). \u00c9 um conceito que ajuda a simplificar o espa\u00e7o de busca inicial, garantindo que cada vari\u00e1vel seja compat\u00edvel com suas condi\u00e7\u00f5es unit\u00e1rias antes de iniciar a resolu\u00e7\u00e3o do problema. Isso \u00e9 particularmente importante para reduzir os valores poss\u00edveis no dom\u00ednio das vari\u00e1veis, eliminando atribui\u00e7\u00f5es que violam as restri\u00e7\u00f5es b\u00e1sicas.</p>"},{"location":"#o-que-e-consistencia-de-nos","title":"O que \u00e9 Consist\u00eancia de N\u00f3s?","text":"<p>Uma vari\u00e1vel (representada como um n\u00f3 em um grafo que modela o CSP) \u00e9 considerada n\u00f3-consistente quando todos os valores do dom\u00ednio dessa vari\u00e1vel satisfazem suas condi\u00e7\u00f5es unit\u00e1rias.</p> <p>Se uma vari\u00e1vel possui valores em seu dom\u00ednio que n\u00e3o satisfazem as condi\u00e7\u00f5es unit\u00e1rias associadas a ela, esses valores podem ser eliminados sem afetar a solu\u00e7\u00e3o final do problema.</p>"},{"location":"#como-garantir-a-consistencia-de-nos","title":"Como Garantir a Consist\u00eancia de N\u00f3s?","text":"<p>A consist\u00eancia de n\u00f3s \u00e9 geralmente alcan\u00e7ada como um passo de pr\u00e9-processamento nos CSPs: 1. Para cada vari\u00e1vel, avalie todas as condi\u00e7\u00f5es unit\u00e1rias associadas a ela. 2. Remova do dom\u00ednio da vari\u00e1vel todos os valores que violam essas condi\u00e7\u00f5es.</p>"},{"location":"#vantagens-da-consistencia-de-nos","title":"Vantagens da Consist\u00eancia de N\u00f3s","text":"<ol> <li> <p>Redu\u00e7\u00e3o do Espa\u00e7o de Busca:    Eliminar valores inv\u00e1lidos no in\u00edcio reduz significativamente o n\u00famero de combina\u00e7\u00f5es a serem exploradas.</p> </li> <li> <p>Simplicidade:    Consist\u00eancia de n\u00f3s \u00e9 um conceito direto e pode ser aplicado de forma eficiente como uma etapa preliminar.</p> </li> <li> <p>Base para Outras Consist\u00eancias:    Garantir a consist\u00eancia de n\u00f3s \u00e9 um pr\u00e9-requisito para aplicar t\u00e9cnicas mais avan\u00e7adas, como a consist\u00eancia de arco e consist\u00eancia de trajet\u00f3ria.</p> </li> </ol>"},{"location":"#exemplo-de-consistencia-de-nos-alocacao-de-tarefas","title":"Exemplo de Consist\u00eancia de N\u00f3s: Aloca\u00e7\u00e3o de Tarefas","text":"<p>Vamos aplicar o conceito de consist\u00eancia de n\u00f3s em um problema de aloca\u00e7\u00e3o de tarefas. Imagine que temos um conjunto de funcion\u00e1rios e tarefas que devem ser atribu\u00eddas, com algumas condi\u00e7\u00f5es espec\u00edficas.</p>"},{"location":"#problema","title":"Problema","text":"<p>Temos tr\u00eas funcion\u00e1rios (A, B, C) que podem realizar tarefas espec\u00edficas. O objetivo \u00e9 garantir que cada funcion\u00e1rio receba uma tarefa que esteja dentro de sua capacidade.</p> <ol> <li>Vari\u00e1veis:</li> <li> <p>Funcion\u00e1rios: <code>A</code>, <code>B</code>, <code>C</code>.</p> </li> <li> <p>Dom\u00ednios:</p> </li> <li> <p>Cada funcion\u00e1rio pode realizar as seguintes tarefas:  </p> <ul> <li><code>A</code>: <code>{T1, T2, T3}</code> </li> <li><code>B</code>: <code>{T2, T3, T4}</code> </li> <li><code>C</code>: <code>{T1, T3, T4}</code></li> </ul> </li> <li> <p>Condi\u00e7\u00f5es Unit\u00e1rias:</p> </li> <li>Funcion\u00e1rio <code>A</code> n\u00e3o pode realizar a tarefa <code>T2</code>.  </li> <li>Funcion\u00e1rio <code>C</code> s\u00f3 pode realizar tarefas que terminam com o n\u00famero <code>4</code>.  </li> </ol>"},{"location":"#garantindo-consistencia-de-nos","title":"Garantindo Consist\u00eancia de N\u00f3s","text":"<ol> <li>Para a vari\u00e1vel <code>A</code>, eliminamos <code>T2</code> do dom\u00ednio, j\u00e1 que a condi\u00e7\u00e3o unit\u00e1ria impede <code>A</code> de realizar essa tarefa.</li> <li>Para a vari\u00e1vel <code>C</code>, restringimos o dom\u00ednio para conter apenas <code>T4</code>, pois essa \u00e9 a \u00fanica tarefa v\u00e1lida de acordo com a condi\u00e7\u00e3o unit\u00e1ria.</li> </ol>"},{"location":"#novo-dominio-apos-consistencia-de-nos","title":"Novo Dom\u00ednio Ap\u00f3s Consist\u00eancia de N\u00f3s:","text":"<ul> <li><code>A</code>: <code>{T1, T3}</code> </li> <li><code>B</code>: <code>{T2, T3, T4}</code> </li> <li><code>C</code>: <code>{T4}</code> </li> </ul>"},{"location":"#codigo-em-python","title":"C\u00f3digo em Python","text":"<p>Aqui est\u00e1 a implementa\u00e7\u00e3o do exemplo:</p> <pre><code>from constraint import Problem\n\n# Fun\u00e7\u00e3o para aplicar consist\u00eancia de n\u00f3s\ndef apply_node_consistency(problem, variable, condition):\n    \"\"\"\n    Remove valores do dom\u00ednio de uma vari\u00e1vel que n\u00e3o satisfazem a condi\u00e7\u00e3o.\n    \"\"\"\n    domain = problem._variables[variable]\n    consistent_domain = [value for value in domain if condition(value)]\n    problem._variables[variable] = consistent_domain\n\n# Exemplo: Aloca\u00e7\u00e3o de tarefas\ndef task_allocation_example():\n    problem = Problem()\n\n    # Adicionando vari\u00e1veis e seus dom\u00ednios\n    problem.addVariable(\"A\", [\"T1\", \"T2\", \"T3\"])  # Funcion\u00e1rio A\n    problem.addVariable(\"B\", [\"T2\", \"T3\", \"T4\"])  # Funcion\u00e1rio B\n    problem.addVariable(\"C\", [\"T1\", \"T3\", \"T4\"])  # Funcion\u00e1rio C\n\n    # Aplicando consist\u00eancia de n\u00f3\n    apply_node_consistency(problem, \"A\", lambda task: task != \"T2\")  # A n\u00e3o pode realizar T2\n    apply_node_consistency(problem, \"C\", lambda task: task.endswith(\"4\"))  # C s\u00f3 realiza tarefas que terminam com 4\n\n    # Mostrando os dom\u00ednios atualizados\n    return problem._variables\n\n# Executar exemplo\ndomains_after_consistency = task_allocation_example()\nprint(\"Dom\u00ednios ap\u00f3s consist\u00eancia de n\u00f3s:\", domains_after_consistency)\n</code></pre>"},{"location":"#saida","title":"Sa\u00edda:","text":"<pre><code>Dom\u00ednios ap\u00f3s consist\u00eancia de n\u00f3s: {'A': ['T1', 'T3'], 'B': ['T2', 'T3', 'T4'], 'C': ['T4']}\n</code></pre>"},{"location":"#interpretacao","title":"Interpreta\u00e7\u00e3o","text":"<ol> <li>O dom\u00ednio de <code>A</code> foi reduzido de <code>{T1, T2, T3}</code> para <code>{T1, T3}</code> devido \u00e0 condi\u00e7\u00e3o de que <code>A</code> n\u00e3o pode realizar <code>T2</code>.</li> <li>O dom\u00ednio de <code>C</code> foi reduzido de <code>{T1, T3, T4}</code> para <code>{T4}</code>, pois somente <code>T4</code> satisfaz a condi\u00e7\u00e3o de tarefas que terminam com <code>4</code>.</li> <li>O dom\u00ednio de <code>B</code> permaneceu inalterado, pois nenhuma condi\u00e7\u00e3o unit\u00e1ria foi aplicada a ele.</li> </ol>"},{"location":"#resumo","title":"Resumo","text":"<p>Este exemplo ilustra como aplicar consist\u00eancia de n\u00f3s em um problema realista de aloca\u00e7\u00e3o de tarefas, mostrando como as condi\u00e7\u00f5es unit\u00e1rias ajudam a reduzir o espa\u00e7o de busca e tornam o problema mais manej\u00e1vel antes de avan\u00e7ar para outras formas de consist\u00eancia, como consist\u00eancia de arcos.</p>"},{"location":"#consistencia-de-arco","title":"Consist\u00eancia de Arco","text":"<p>A consist\u00eancia de arco \u00e9 um conceito crucial em problemas de satisfa\u00e7\u00e3o de condi\u00e7\u00f5es (CSPs), principalmente quando lidamos com rela\u00e7\u00f5es entre duas vari\u00e1veis. Esse tipo de consist\u00eancia se concentra em garantir que, para todas as vari\u00e1veis de um problema, cada valor no dom\u00ednio de uma vari\u00e1vel seja compat\u00edvel com algum valor no dom\u00ednio da vari\u00e1vel relacionada por uma condi\u00e7\u00e3o bin\u00e1ria.</p>"},{"location":"#o-que-e-consistencia-de-arco","title":"O que \u00e9 Consist\u00eancia de Arco?","text":"<p>Uma vari\u00e1vel em um CSP \u00e9 considerada arco-consistente se todos os valores em seu dom\u00ednio satisfazem as condi\u00e7\u00f5es bin\u00e1rias associadas a ela. Isso significa que, para cada valor da vari\u00e1vel, existe pelo menos um valor na vari\u00e1vel relacionada que respeita a restri\u00e7\u00e3o entre as duas vari\u00e1veis.</p> <p>Um grafo \u00e9 arco-consistente se todas as vari\u00e1veis do grafo s\u00e3o arco-consistentes entre si, ou seja, se todas as condi\u00e7\u00f5es bin\u00e1rias entre as vari\u00e1veis s\u00e3o satisfeitas.</p>"},{"location":"#exemplo-de-consistencia-de-arco","title":"Exemplo de Consist\u00eancia de Arco","text":"<p>Vamos usar o exemplo de um problema de aloca\u00e7\u00e3o de hor\u00e1rios para aulas, em que temos duas vari\u00e1veis, Professor A e Professor B, que precisam ser alocados a hor\u00e1rios diferentes.</p>"},{"location":"#problema_1","title":"Problema:","text":"<p>Temos duas vari\u00e1veis, A (para o Professor A) e B (para o Professor B). Ambas t\u00eam o seguinte dom\u00ednio de valores, representando os hor\u00e1rios dispon\u00edveis:</p> <ul> <li>Dom\u00ednio de A: <code>{1, 2, 3}</code> (representando os hor\u00e1rios 1, 2 e 3).</li> <li>Dom\u00ednio de B: <code>{2, 3, 4}</code> (representando os hor\u00e1rios 2, 3 e 4).</li> </ul> <p>Condi\u00e7\u00e3o Bin\u00e1ria: A e B n\u00e3o podem ser alocados ao mesmo hor\u00e1rio.</p> <p>Portanto, a condi\u00e7\u00e3o bin\u00e1ria \u00e9: A \u2260 B (A e B n\u00e3o podem ter o mesmo valor de hor\u00e1rio).</p>"},{"location":"#consistencia-de-arco-no-exemplo","title":"Consist\u00eancia de Arco no Exemplo","text":"<ol> <li> <p>Para a vari\u00e1vel A com dom\u00ednio <code>{1, 2, 3}</code>, precisamos verificar se existe algum valor no dom\u00ednio de B que seja diferente de A para cada valor de A.</p> </li> <li> <p>Para A = 1, verificamos se existe algum valor em B que seja diferente de 1. Os valores v\u00e1lidos para B s\u00e3o <code>{2, 3, 4}</code>, e todos esses valores s\u00e3o diferentes de 1. Logo, A = 1 \u00e9 arco-consistente.</p> </li> <li> <p>Para A = 2, verificamos se existe algum valor em B que seja diferente de 2. Os valores v\u00e1lidos para B s\u00e3o <code>{3, 4}</code>, ambos diferentes de 2, ent\u00e3o A = 2 \u00e9 arco-consistente.</p> </li> <li> <p>Para A = 3, verificamos se existe algum valor em B que seja diferente de 3. Os valores v\u00e1lidos para B s\u00e3o <code>{2, 4}</code>, ambos diferentes de 3, ent\u00e3o A = 3 tamb\u00e9m \u00e9 arco-consistente.</p> </li> <li> <p>Agora, para a vari\u00e1vel B, precisamos verificar a consist\u00eancia de arco em rela\u00e7\u00e3o \u00e0 vari\u00e1vel A. Para cada valor no dom\u00ednio de B, verificamos se existe algum valor no dom\u00ednio de A que seja diferente de B.</p> </li> <li> <p>Para B = 2, verificamos se existe algum valor em A que seja diferente de 2. O valor v\u00e1lido em A \u00e9 1, ent\u00e3o B = 2 \u00e9 arco-consistente.</p> </li> <li> <p>Para B = 3, verificamos se existe algum valor em A que seja diferente de 3. O valor v\u00e1lido em A \u00e9 1, ent\u00e3o B = 3 \u00e9 arco-consistente.</p> </li> <li> <p>Para B = 4, verificamos se existe algum valor em A que seja diferente de 4. Os valores v\u00e1lidos em A s\u00e3o <code>{1, 2, 3}</code>, todos diferentes de 4, ent\u00e3o B = 4 tamb\u00e9m \u00e9 arco-consistente.</p> </li> </ol>"},{"location":"#resultado-da-consistencia-de-arco","title":"Resultado da Consist\u00eancia de Arco","text":"<ul> <li>A \u00e9 arco-consistente, pois para cada valor no seu dom\u00ednio, existe pelo menos um valor em B que satisfa\u00e7a a restri\u00e7\u00e3o A \u2260 B.</li> <li>B \u00e9 arco-consistente, pois para cada valor no seu dom\u00ednio, existe pelo menos um valor em A que satisfaz a restri\u00e7\u00e3o A \u2260 B.</li> </ul> <p>Neste caso, a consist\u00eancia de arco n\u00e3o reduz o n\u00famero de valores nos dom\u00ednios das vari\u00e1veis, mas garante que todas as poss\u00edveis atribui\u00e7\u00f5es de valores entre as duas vari\u00e1veis respeitem a restri\u00e7\u00e3o bin\u00e1ria.</p>"},{"location":"#aplicacao-do-algoritmo-ac-3","title":"Aplica\u00e7\u00e3o do Algoritmo AC-3","text":"<p>O algoritmo AC-3 (Arc-Consistency 3) \u00e9 um dos m\u00e9todos mais comuns para verificar a consist\u00eancia de arco. Ele trabalha de forma iterativa, verificando se todas as restri\u00e7\u00f5es bin\u00e1rias s\u00e3o satisfeitas e ajustando os dom\u00ednios das vari\u00e1veis conforme necess\u00e1rio.</p> <p>O algoritmo AC-3 aplicaria as verifica\u00e7\u00f5es de consist\u00eancia de arco para as vari\u00e1veis A e B de acordo com a restri\u00e7\u00e3o A \u2260 B. O algoritmo garantiria que os dom\u00ednios de A e B permanecessem consistentes, sem a necessidade de fazer ajustes, pois o espa\u00e7o de busca j\u00e1 est\u00e1 em conformidade com as restri\u00e7\u00f5es.</p>"},{"location":"#exemplo-em-codigo-python","title":"Exemplo em C\u00f3digo Python","text":"<p>Aqui est\u00e1 a implementa\u00e7\u00e3o de um exemplo simples de consist\u00eancia de arco em Python:</p> <pre><code>from constraint import Problem\n\n# Fun\u00e7\u00e3o para aplicar consist\u00eancia de arco\ndef arc_consistency(problem, var1, var2, condition):\n    \"\"\"\n    Aplica consist\u00eancia de arco entre duas vari\u00e1veis.\n    \"\"\"\n    domain1 = problem._variables[var1]\n    domain2 = problem._variables[var2]\n\n    # Verificar se todos os valores em var1 t\u00eam uma correspond\u00eancia em var2 que satisfa\u00e7a a condi\u00e7\u00e3o\n    for value1 in domain1[:]:\n        valid = False\n        for value2 in domain2:\n            if condition(value1, value2):\n                valid = True\n                break\n        if not valid:\n            domain1.remove(value1)  # Eliminar valor inv\u00e1lido\n    # Verificar tamb\u00e9m para var2\n    for value2 in domain2[:]:\n        valid = False\n        for value1 in domain1:\n            if condition(value1, value2):\n                valid = True\n                break\n        if not valid:\n            domain2.remove(value2)  # Eliminar valor inv\u00e1lido\n\n# Exemplo: Aloca\u00e7\u00e3o de hor\u00e1rios para professores\ndef schedule_example():\n    problem = Problem()\n\n    # Adicionando vari\u00e1veis e seus dom\u00ednios\n    problem.addVariable(\"A\", [1, 2, 3])  # Professor A\n    problem.addVariable(\"B\", [2, 3, 4])  # Professor B\n\n    # Aplicando consist\u00eancia de arco\n    arc_consistency(problem, \"A\", \"B\", lambda a, b: a != b)\n\n    # Mostrando os dom\u00ednios atualizados\n    return problem._variables\n\n# Executar exemplo\ndomains_after_arc_consistency = schedule_example()\nprint(\"Dom\u00ednios ap\u00f3s consist\u00eancia de arco:\", domains_after_arc_consistency)\n</code></pre>"},{"location":"#saida_1","title":"Sa\u00edda:","text":"<pre><code>Dom\u00ednios ap\u00f3s consist\u00eancia de arco: {'A': [1, 2, 3], 'B': [2, 3, 4]}\n</code></pre>"},{"location":"#conclusao_1","title":"Conclus\u00e3o","text":"<p>A consist\u00eancia de arco garante que, para cada par de vari\u00e1veis, qualquer valor atribu\u00eddo a uma vari\u00e1vel tenha uma correspondente atribui\u00e7\u00e3o poss\u00edvel para a vari\u00e1vel relacionada que satisfa\u00e7a a restri\u00e7\u00e3o bin\u00e1ria. Embora o exemplo mostrado aqui n\u00e3o tenha causado mudan\u00e7as significativas nos dom\u00ednios das vari\u00e1veis, a consist\u00eancia de arco \u00e9 uma t\u00e9cnica crucial para reduzir o espa\u00e7o de busca em problemas mais complexos. Al\u00e9m disso, algoritmos como AC-3 s\u00e3o fundamentais para automatizar esse processo em problemas de maior escala.</p>"},{"location":"#consistencia-de-trajeto","title":"Consist\u00eancia de Trajeto","text":"<p>A consist\u00eancia de trajeto \u00e9 um conceito mais avan\u00e7ado e menos intuitivo que a consist\u00eancia de arco e n\u00f3. Ela aborda as rela\u00e7\u00f5es entre triplas de vari\u00e1veis em um problema de satisfa\u00e7\u00e3o de condi\u00e7\u00f5es (CSP). Ao contr\u00e1rio da consist\u00eancia de arco, que se concentra em pares de vari\u00e1veis, a consist\u00eancia de trajeto examina a intera\u00e7\u00e3o entre tr\u00eas vari\u00e1veis e suas respectivas condi\u00e7\u00f5es. </p>"},{"location":"#o-que-e-consistencia-de-trajeto","title":"O que \u00e9 Consist\u00eancia de Trajeto?","text":"<p>A consist\u00eancia de trajeto verifica se, dada uma tripla de vari\u00e1veis, existe uma combina\u00e7\u00e3o de valores que satisfa\u00e7a as condi\u00e7\u00f5es de todas as tr\u00eas vari\u00e1veis, levando em considera\u00e7\u00e3o as restri\u00e7\u00f5es entre essas vari\u00e1veis. Essencialmente, a consist\u00eancia de trajeto permite inferir novas condi\u00e7\u00f5es impl\u00edcitas observando intera\u00e7\u00f5es de tr\u00eas vari\u00e1veis ao mesmo tempo, e n\u00e3o apenas duas, como no caso da consist\u00eancia de arco.</p> <p>Uma tripla de vari\u00e1veis X, Y e Z \u00e9 considerada trajeto-consistente se, para cada atribui\u00e7\u00e3o de valores a X e Y que satisfa\u00e7am as condi\u00e7\u00f5es entre X e Y, existir uma atribui\u00e7\u00e3o para Z que satisfa\u00e7a tanto as condi\u00e7\u00f5es entre X e Z, quanto entre Y e Z.</p>"},{"location":"#alocacao-de-projetos-a-funcionarios","title":"Aloca\u00e7\u00e3o de Projetos a Funcion\u00e1rios","text":"<p>Tendo um conjunto de tr\u00eas funcion\u00e1rios e tr\u00eas projetos que devem ser alocados. Cada projeto tem um prazo de entrega, e cada funcion\u00e1rio tem uma capacidade de trabalhar em determinados projetos dentro de uma janela de tempo. O problema \u00e9 alocar os projetos aos funcion\u00e1rios, respeitando as condi\u00e7\u00f5es de tempo e capacidade de cada um.</p>"},{"location":"#variaveis","title":"Vari\u00e1veis:","text":"<ul> <li>Funcion\u00e1rio A: Pode trabalhar em <code>{P1, P2, P3}</code></li> <li>Funcion\u00e1rio B: Pode trabalhar em <code>{P1, P2, P3}</code></li> <li>Funcion\u00e1rio C: Pode trabalhar em <code>{P1, P2, P3}</code></li> </ul>"},{"location":"#restricoes","title":"Restri\u00e7\u00f5es:","text":"<ul> <li>P1 precisa ser completado at\u00e9 o dia 5.</li> <li>P2 precisa ser completado at\u00e9 o dia 10.</li> <li>P3 precisa ser completado at\u00e9 o dia 15.</li> </ul> <p>Condicionais: 1. O Funcion\u00e1rio A pode trabalhar em P1 e P3, mas n\u00e3o em P2. 2. O Funcion\u00e1rio B pode trabalhar em P2 e P3, mas n\u00e3o em P1. 3. O Funcion\u00e1rio C pode trabalhar em P1 e P2, mas n\u00e3o em P3.</p> <p>A consist\u00eancia de trajeto em rela\u00e7\u00e3o a essas tr\u00eas vari\u00e1veis (os funcion\u00e1rios A, B e C) verifica se a combina\u00e7\u00e3o de A e B que satisfaz suas restri\u00e7\u00f5es tamb\u00e9m permite uma aloca\u00e7\u00e3o vi\u00e1vel para o Funcion\u00e1rio C.</p> <ul> <li>Se, por exemplo, o Funcion\u00e1rio A for alocado em P1 e o Funcion\u00e1rio B for alocado em P2, ent\u00e3o a consist\u00eancia de trajeto verifica se \u00e9 poss\u00edvel alocar o Funcion\u00e1rio C em P3 sem violar nenhuma restri\u00e7\u00e3o de prazo.</li> </ul> <p>Em outras palavras, a consist\u00eancia de trajeto exige que, para cada atribui\u00e7\u00e3o v\u00e1lida de A e B, exista uma atribui\u00e7\u00e3o v\u00e1lida para C que atenda todas as condi\u00e7\u00f5es de capacidade e prazo.</p>"},{"location":"#aplicacao-da-consistencia-de-trajeto","title":"Aplica\u00e7\u00e3o da Consist\u00eancia de Trajeto","text":"<p>A consist\u00eancia de trajeto \u00e9 especialmente \u00fatil quando lidamos com problemas que envolvem m\u00faltiplas intera\u00e7\u00f5es entre vari\u00e1veis, como em problemas de planejamento de recursos ou aloca\u00e7\u00e3o de tarefas, onde \u00e9 necess\u00e1rio garantir que a solu\u00e7\u00e3o para um conjunto de vari\u00e1veis seja consistente com outras vari\u00e1veis relacionadas.</p> <ul> <li> <p>Em um problema de aloca\u00e7\u00e3o de hor\u00e1rios de aulas, a consist\u00eancia de trajeto pode ser usada para garantir que as condi\u00e7\u00f5es de aloca\u00e7\u00e3o de professores, salas e turmas sejam satisfat\u00f3rias ao mesmo tempo. Por exemplo, se duas turmas est\u00e3o programadas para usar a mesma sala, a consist\u00eancia de trajeto pode ser utilizada para garantir que o hor\u00e1rio de uma delas n\u00e3o entre em conflito com o hor\u00e1rio da outra.</p> </li> <li> <p>Em um problema de otimiza\u00e7\u00e3o de redes, como aloca\u00e7\u00e3o de recursos em redes de computadores, a consist\u00eancia de trajeto pode ser usada para garantir que as vari\u00e1veis associadas aos links de rede e aos dispositivos sejam combinadas de maneira que a rede funcione de maneira eficiente e sem congestionamentos.</p> </li> </ul>"},{"location":"#conclusao_2","title":"Conclus\u00e3o","text":"<p>A consist\u00eancia de trajeto \u00e9 uma t\u00e9cnica poderosa e \u00fatil para resolver CSPs complexos, onde as restri\u00e7\u00f5es n\u00e3o envolvem apenas pares de vari\u00e1veis, mas sim intera\u00e7\u00f5es mais complexas entre trios de vari\u00e1veis. Essa t\u00e9cnica permite inferir condi\u00e7\u00f5es impl\u00edcitas e reduzir o espa\u00e7o de busca de maneira mais eficiente. Embora o conceito seja menos intuitivo que a consist\u00eancia de arco e n\u00f3, ele \u00e9 essencial para a resolu\u00e7\u00e3o de problemas em \u00e1reas como aloca\u00e7\u00e3o de recursos, planejamento de hor\u00e1rios e otimiza\u00e7\u00e3o de redes.</p>"},{"location":"#consistencia-k-em-csps","title":"Consist\u00eancia k em CSPs","text":"<p>A consist\u00eancia k \u00e9 uma extens\u00e3o dos conceitos de consist\u00eancia usados em problemas de satisfa\u00e7\u00e3o de condi\u00e7\u00f5es (CSPs), como consist\u00eancia de n\u00f3, consist\u00eancia de arco e consist\u00eancia de trajeto. A ideia central por tr\u00e1s da consist\u00eancia k \u00e9 garantir que, para qualquer conjunto de (k - 1) vari\u00e1veis, exista uma atribui\u00e7\u00e3o de valores consistente para a k-\u00e9sima vari\u00e1vel, levando em considera\u00e7\u00e3o todas as restri\u00e7\u00f5es entre essas vari\u00e1veis.</p> <p>A consist\u00eancia k permite que, ao considerar qualquer conjunto de (k - 1) vari\u00e1veis em um CSP, se j\u00e1 houver uma atribui\u00e7\u00e3o consistente para essas (k - 1) vari\u00e1veis, ser\u00e1 poss\u00edvel encontrar uma atribui\u00e7\u00e3o v\u00e1lida para a k-\u00e9sima vari\u00e1vel que satisfa\u00e7a as condi\u00e7\u00f5es do problema.</p>"},{"location":"#definicao-formal-da-consistencia-k","title":"Defini\u00e7\u00e3o Formal da Consist\u00eancia k","text":"<p>Uma CSP \u00e9 considerada k-consistente se, para qualquer conjunto de (k - 1) vari\u00e1veis e para qualquer atribui\u00e7\u00e3o consistente dessas vari\u00e1veis, sempre \u00e9 poss\u00edvel encontrar uma atribui\u00e7\u00e3o consistente para a k-\u00e9sima vari\u00e1vel.</p> <p>Al\u00e9m disso, uma CSP pode ser considerada fortemente k-consistente se ela for k-consistente, (k-1)-consistente, (k-2)-consistente, e assim por diante, at\u00e9 ser 1-consistente. Ou seja, a consist\u00eancia deve ser v\u00e1lida para todas as ordens de vari\u00e1veis, desde o conjunto mais simples at\u00e9 o conjunto completo de vari\u00e1veis do CSP.</p>"},{"location":"#exemplo-de-consistencia-3","title":"Exemplo de Consist\u00eancia 3","text":"<p>Vamos ilustrar o conceito de consist\u00eancia k com um exemplo que envolva aloca\u00e7\u00e3o de tarefas em uma empresa, considerando a consist\u00eancia 3.</p>"},{"location":"#cenario","title":"Cen\u00e1rio","text":"<p>Uma empresa tem 3 departamentos que precisam ser alocados em 3 salas para realizar tarefas. Cada sala tem um conjunto espec\u00edfico de recursos, e as tarefas devem ser alocadas a essas salas de forma que nenhuma tarefa seja alocada a uma sala j\u00e1 ocupada por outra tarefa no mesmo per\u00edodo de tempo.</p> <p>As vari\u00e1veis no problema s\u00e3o os departamentos e as salas, e a restri\u00e7\u00e3o \u00e9 que cada departamento deve ser alocado a uma sala \u00fanica.</p>"},{"location":"#definicao-das-variaveis","title":"Defini\u00e7\u00e3o das Vari\u00e1veis:","text":"<ul> <li>Departamento 1: {Sala A, Sala B, Sala C}</li> <li>Departamento 2: {Sala A, Sala B, Sala C}</li> <li>Departamento 3: {Sala A, Sala B, Sala C}</li> </ul>"},{"location":"#restricoes_1","title":"Restri\u00e7\u00f5es:","text":"<ol> <li>Departamento 1 n\u00e3o pode ser alocado na mesma sala que Departamento 2.</li> <li>Departamento 2 n\u00e3o pode ser alocado na mesma sala que Departamento 3.</li> <li>Departamento 1 n\u00e3o pode ser alocado na mesma sala que Departamento 3.</li> </ol> <p>Agora, vamos considerar que temos um conjunto de 3 vari\u00e1veis (os departamentos) e que desejamos verificar a consist\u00eancia 3 para este problema.</p>"},{"location":"#consistencia-3","title":"Consist\u00eancia 3:","text":"<p>A consist\u00eancia 3 exige que, para qualquer conjunto de 2 vari\u00e1veis (digamos Departamento 1 e Departamento 2), existir\u00e1 uma atribui\u00e7\u00e3o para a terceira vari\u00e1vel (o Departamento 3) que seja compat\u00edvel com as atribui\u00e7\u00f5es j\u00e1 feitas para as duas primeiras vari\u00e1veis.</p> <ul> <li> <p>Se Departamento 1 for alocado em Sala A e Departamento 2 for alocado em Sala B, ent\u00e3o, para que o problema seja consistente, Departamento 3 deve ser alocado em Sala C. Esta aloca\u00e7\u00e3o garante que todas as restri\u00e7\u00f5es sejam satisfeitas.</p> </li> <li> <p>Se Departamento 1 for alocado em Sala B e Departamento 2 for alocado em Sala C, ent\u00e3o Departamento 3 deve ser alocado em Sala A.</p> </li> </ul> <p>Portanto, para cada conjunto de 2 vari\u00e1veis j\u00e1 alocadas, sempre existir\u00e1 uma aloca\u00e7\u00e3o v\u00e1lida para o Departamento 3, o que demonstra que o problema \u00e9 3-consistente.</p>"},{"location":"#consistencia-fortemente-k-consistente","title":"Consist\u00eancia Fortemente k-consistente","text":"<p>Se a CSP for fortemente k-consistente, ela ser\u00e1 (k-1)-consistente, (k-2)-consistente, at\u00e9 ser 1-consistente. No exemplo acima, uma vez que a CSP seja 3-consistente, ela tamb\u00e9m seria automaticamente 2-consistente e 1-consistente, porque cada n\u00edvel de consist\u00eancia \u00e9 garantido pela consist\u00eancia do n\u00edvel superior.</p>"},{"location":"#resumo-do-tempo-de-execucao","title":"Resumo do Tempo de Execu\u00e7\u00e3o","text":"<p>Em termos de complexidade de tempo, a consist\u00eancia k pode ser computacionalmente cara, pois envolve verificar todas as combina\u00e7\u00f5es de (k - 1) vari\u00e1veis e calcular as combina\u00e7\u00f5es consistentes para a k-\u00e9sima vari\u00e1vel. Por\u00e9m, a vantagem \u00e9 que, ao garantir que todas as condi\u00e7\u00f5es de consist\u00eancia est\u00e3o satisfeitas, \u00e9 poss\u00edvel reduzir significativamente o espa\u00e7o de busca e, portanto, otimizar a resolu\u00e7\u00e3o do problema CSP.</p>"},{"location":"#conclusao_3","title":"Conclus\u00e3o","text":"<p>A consist\u00eancia k \u00e9 uma forma mais forte de garantir que uma CSP tenha uma solu\u00e7\u00e3o v\u00e1lida, analisando conjuntos maiores de vari\u00e1veis em rela\u00e7\u00e3o \u00e0s formas mais simples de consist\u00eancia. Ela \u00e9 particularmente \u00fatil quando o problema envolve intera\u00e7\u00f5es complexas entre um n\u00famero maior de vari\u00e1veis. A consist\u00eancia k permite uma verifica\u00e7\u00e3o mais eficiente e pode simplificar a resolu\u00e7\u00e3o do problema ao reduzir o espa\u00e7o de busca, especialmente em CSPs com muitas vari\u00e1veis inter-relacionadas.</p>"},{"location":"#consistencia-global-em-csps","title":"Consist\u00eancia Global em CSPs","text":"<p>As condi\u00e7\u00f5es globais s\u00e3o um conceito importante em problemas de satisfa\u00e7\u00e3o de restri\u00e7\u00f5es (CSPs), onde um n\u00famero arbitr\u00e1rio de vari\u00e1veis pode ser envolvido em uma restri\u00e7\u00e3o. Ao contr\u00e1rio das condi\u00e7\u00f5es unit\u00e1rias, bin\u00e1rias ou tern\u00e1rias, que envolvem um n\u00famero fixo de vari\u00e1veis, as condi\u00e7\u00f5es globais podem envolver muitas vari\u00e1veis ao mesmo tempo, o que traz desafios significativos para a solu\u00e7\u00e3o de CSPs. A consist\u00eancia global \u00e9 uma forma de propagar essas condi\u00e7\u00f5es e reduzir o espa\u00e7o de busca de maneira eficiente, especialmente em casos em que m\u00faltiplas vari\u00e1veis est\u00e3o inter-relacionadas de maneira complexa.</p> <p>A consist\u00eancia global funciona de maneira semelhante \u00e0 consist\u00eancia de arco e de n\u00f3, mas com um n\u00edvel mais alto de complexidade devido ao n\u00famero maior de vari\u00e1veis envolvidas. O objetivo \u00e9 garantir que as condi\u00e7\u00f5es globais sejam mantidas, propagando informa\u00e7\u00f5es de maneira eficiente e verificando se \u00e9 poss\u00edvel reduzir os dom\u00ednios das vari\u00e1veis de forma que todas as condi\u00e7\u00f5es sejam satisfeitas simultaneamente.</p>"},{"location":"#algoritmo-de-consistencia-global","title":"Algoritmo de Consist\u00eancia Global","text":"<p>O algoritmo de consist\u00eancia global se baseia em uma s\u00e9rie de passos para propaga\u00e7\u00e3o de informa\u00e7\u00f5es e redu\u00e7\u00e3o dos dom\u00ednios das vari\u00e1veis. O processo geral pode ser descrito da seguinte maneira:</p> <ol> <li> <p>Remover vari\u00e1veis com um \u00fanico valor no dom\u00ednio: Se uma vari\u00e1vel tem apenas um valor poss\u00edvel no seu dom\u00ednio, esse valor \u00e9 fixado e removido dos dom\u00ednios das outras vari\u00e1veis.</p> </li> <li> <p>Propagar a elimina\u00e7\u00e3o: Se uma vari\u00e1vel tem um valor fixado, esse valor deve ser removido dos dom\u00ednios das vari\u00e1veis que est\u00e3o envolvidas nas condi\u00e7\u00f5es globais. Isso pode reduzir os dom\u00ednios de outras vari\u00e1veis e simplificar o problema.</p> </li> <li> <p>Repetir o processo: O processo \u00e9 repetido para todas as vari\u00e1veis cujos dom\u00ednios tenham sido reduzidos a um \u00fanico valor.</p> </li> <li> <p>Detectar inconsist\u00eancias: Se, em qualquer momento, o dom\u00ednio de uma vari\u00e1vel se tornar vazio ou se houver mais vari\u00e1veis do que valores restantes, isso indica que uma inconsist\u00eancia foi detectada e que n\u00e3o h\u00e1 solu\u00e7\u00e3o poss\u00edvel para o problema.</p> </li> <li> <p>Propaga\u00e7\u00e3o de limites: Quando h\u00e1 um n\u00famero grande de valores em um dom\u00ednio, a propaga\u00e7\u00e3o de limites \u00e9 usada para restringir os valores poss\u00edveis sem verificar todas as combina\u00e7\u00f5es poss\u00edveis.</p> </li> </ol>"},{"location":"#exemplo-de-condicao-global","title":"Exemplo de Condi\u00e7\u00e3o Global:","text":"<p>Considerando o cen\u00e1rio de um agendamento de reuni\u00f5es em uma empresa, onde v\u00e1rias salas de confer\u00eancias precisam ser alocadas para diferentes reuni\u00f5es. Cada reuni\u00e3o tem um n\u00famero espec\u00edfico de participantes, e as salas t\u00eam capacidades limitadas. Al\u00e9m disso, existem condi\u00e7\u00f5es globais que envolvem m\u00faltiplas vari\u00e1veis ao mesmo tempo.</p>"},{"location":"#cenario_1","title":"Cen\u00e1rio:","text":"<ul> <li>Salas: Sala A (capacidade 50 pessoas), Sala B (capacidade 100 pessoas), Sala C (capacidade 150 pessoas)</li> <li>Reuni\u00f5es: Reuni\u00e3o 1 (precisa de entre 30 e 50 pessoas), Reuni\u00e3o 2 (precisa de entre 50 e 100 pessoas), Reuni\u00e3o 3 (precisa de entre 100 e 150 pessoas)</li> </ul>"},{"location":"#condicional-global","title":"Condicional Global:","text":"<p>A condi\u00e7\u00e3o global \u00e9 que nenhuma sala pode ser ocupada por duas reuni\u00f5es simultaneamente, e as salas devem ser alocadas de forma que a soma das capacidades das reuni\u00f5es n\u00e3o ultrapasse a capacidade total das salas.</p>"},{"location":"#dominios-iniciais","title":"Dom\u00ednios Iniciais:","text":"<ul> <li>Reuni\u00e3o 1: {30, 50}</li> <li>Reuni\u00e3o 2: {50, 100}</li> <li>Reuni\u00e3o 3: {100, 150}</li> </ul>"},{"location":"#processo-de-consistencia-global","title":"Processo de Consist\u00eancia Global:","text":"<ol> <li> <p>Remover valores \u00fanicos: Se uma reuni\u00e3o tem uma \u00fanica possibilidade (como 50 pessoas na Reuni\u00e3o 1 ou 100 pessoas na Reuni\u00e3o 2), esse valor \u00e9 fixado.</p> </li> <li> <p>Verifica\u00e7\u00e3o da condi\u00e7\u00e3o global: Se as reuni\u00f5es n\u00e3o podem ser alocadas simultaneamente em salas de confer\u00eancia com capacidades superiores \u00e0 soma das suas participa\u00e7\u00f5es, vamos restringir os dom\u00ednios. Por exemplo, se a Reuni\u00e3o 1 e a Reuni\u00e3o 2 forem alocadas em diferentes salas, a Reuni\u00e3o 3 precisa ser alocada em uma sala de maior capacidade, devido \u00e0 sua maior demanda.</p> </li> <li> <p>Propaga\u00e7\u00e3o de limites: Se, por exemplo, a Reuni\u00e3o 1 est\u00e1 alocada na Sala A com 50 participantes, e a Reuni\u00e3o 2 est\u00e1 alocada na Sala B com 100 participantes, ent\u00e3o a Reuni\u00e3o 3 deve ser alocada na Sala C, pois as outras salas j\u00e1 est\u00e3o ocupadas. Isso restringe a possibilidade de alocar a Reuni\u00e3o 3 na Sala B ou A.</p> </li> <li> <p>Detec\u00e7\u00e3o de inconsist\u00eancias: Caso as condi\u00e7\u00f5es n\u00e3o possam ser satisfeitas (por exemplo, se uma reuni\u00e3o n\u00e3o puder ser alocada a nenhuma sala devido a limita\u00e7\u00f5es de capacidade), uma inconsist\u00eancia ser\u00e1 detectada, e a solu\u00e7\u00e3o ser\u00e1 considerada invi\u00e1vel.</p> </li> </ol>"},{"location":"#resultado","title":"Resultado:","text":"<p>Ap\u00f3s a aplica\u00e7\u00e3o da consist\u00eancia global, as vari\u00e1veis (reuni\u00f5es) ter\u00e3o dom\u00ednios de valores reduzidos e restringidos de forma a garantir que todas as condi\u00e7\u00f5es sejam atendidas simultaneamente. Caso contr\u00e1rio, o algoritmo detectar\u00e1 uma inconsist\u00eancia e ajustar\u00e1 os dom\u00ednios para tentar encontrar uma solu\u00e7\u00e3o vi\u00e1vel.</p>"},{"location":"#resumo_1","title":"Resumo","text":"<p>A consist\u00eancia global \u00e9 uma abordagem importante para lidar com problemas complexos de CSPs que envolvem m\u00faltiplas vari\u00e1veis e condi\u00e7\u00f5es globais. Ela visa garantir que todas as condi\u00e7\u00f5es sejam satisfeitas simultaneamente, propagando informa\u00e7\u00f5es e restringindo os dom\u00ednios das vari\u00e1veis. Esse tipo de consist\u00eancia \u00e9 essencial para resolver problemas mais desafiadores, como aloca\u00e7\u00e3o de recursos, planejamento e agendamento.</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<ol> <li>Russell, S., &amp; Norvig, P. (2021). Artificial Intelligence: A Modern Approach (4th Edition). Pearson.  </li> <li>Dechter, R. (2003). Constraint Processing. Morgan Kaufmann.  </li> <li>Apt, K. R. (2003). Principles of Constraint Programming. Cambridge University Press.  </li> <li>Mackworth, A. K. (1977). \"Consistency in Networks of Relations\". Artificial Intelligence.  </li> <li>Rossi, F., Van Beek, P., &amp; Walsh, T. (2006). Handbook of Constraint Programming. Elsevier.</li> </ol>"}]}